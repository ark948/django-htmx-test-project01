htmx-contacthub (contact manager)



Setting up django
1. venv
2. django project
3. django app (contacts)
4. templates dir inside app
5. urls.py file to app
6. forms.py to app
7. custom user model in contacts models.py
8. one simple view in contacts app that will render contacts.html
9. register the model in admin.py
10. modify settings.py
11. project urls.py
12. app's urls
13. add app to settings.py and django-extensions
14. add contact model to contact app
15. register it with admin
16. create a superuser
user01
user01@email.com
123
17. add a view for user's contacts
18. add partials dir to templates
19. add partial template to its parent
20. adding search feature (with text input from daisyui and htmx get function)



Setting up tailwind
    cdn script tag added to base.html
Setting up daisy-ui (component library for tailwind)
    CDN not recommended for production
    cdn link tag added to base.html
Setting up htmx
    cdn script tag added to base.html




search functionality:
    hx-get -> attribute that will allow an elmenet to send a GET request (will be added to search input element)
    hx-trigger -> the event that triggers the request is determined by this
        keyup -> means every time user enters a key, event is triggered
        we'll add a modifer later to prevent the server from getting overwhelmed
        we will add htmx delay modifer, it will wait a given amount of time before issuing the request and reset the countdown
    hx-target -> an elmenet that will receive the resposne of the request and is swapped with



displaying loading logo while searching:
(using htmx -> hx-indicator and daisy's loading component)


NOTE: to send a post request with form, hx-post should be added to button only.
htmx will automatically detect the input fields




signals
throttles
testing
middlewares
data export and import with django-import-export
charting with plotly
custom filters


Filter for contact category will be added later (to finance tracker app (tracker))

adding jinja2
then adding finance tracker models
then filter based on category
then charts


adding HTMX, TailwindCSS, DaisyUI

adding htmx:
download htmx.min.js file from htmx official, create static dir in root folder, put the file there (in js folder), add STATICFILES_DIRS = [BASE_DIR / "static"]
to settings.py, add {% load static %} to base.html above DOCTYPE, update htmx script tag with DTL static tag

adding TailwindCSS: (using tailwind cli)
node.js must be installed,
> npm install tailwindcss @tailwindcss/cli (it will add node_modules folder, and two files, package-lock.json and package.json)
import tailwind in main css file, run:
npx @tailwindcss/cli -i ./static/css/input.css -o ./static/css/output.css --watch
to build compiled css file, update the tailwind link tag in base.html to use output.css


tracker app:
1. adding templates (tailwindCSS, DaisyUI, HTMX), models (CustomUser, Transaction)